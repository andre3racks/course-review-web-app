{"version":3,"file":"DbClient.js","sourceRoot":"","sources":["../src/DbClient.ts"],"names":[],"mappings":"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","sourcesContent":["import {Db, MongoClient} from \"mongodb\";\r\nimport * as mongo from \"mongodb\";\r\nimport {ErrorLog} from \"./logging/errorLog\";\r\nimport {Review} from \"./models/reviews\";\r\nimport {User} from \"./models/users\";\r\n\r\nclass DbClient {\r\n    public db!: Db;\r\n\r\n    public async connect() {\r\n        // connection function modified from lab3 slides to include some aspects of mongo cloud connection function\r\n        const MongoClient = require('mongodb').MongoClient;\r\n        const uri = \"mongodb+srv://seng350Project:seng350Project12345@cluster0-hyxx9.mongodb.net/test?retryWrites=true&w=majority\";\r\n        const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true});\r\n        try {\r\n            const db = await client.connect();\r\n            this.db = db.db(\"myapp\");\r\n            return this.db;\r\n\r\n        } catch (error) {\r\n             ErrorLog.log(error);\r\n        }\r\n    }\r\n\r\n    public async query(collection: string, db: Db) { // method to return all results in collection of DB\r\n        try {\r\n            const result = await db!.collection(collection).find().toArray();\r\n            return result;\r\n        } catch (e) {\r\n            ErrorLog.log(e);\r\n        }\r\n    }\r\n\r\n    public async user_auth(user: User, db: Db) {\r\n        // check if given credentials are valid\r\n        try {\r\n            const users = await this.query(\"users\", db);\r\n            // console.log(users);\r\n            for (const user of users!)   {\r\n                const temp = new User(user.email, user.password);\r\n                if (temp.isEqual(user)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        } catch (e)   {\r\n           ErrorLog.log(e);\r\n        }\r\n\r\n    }\r\n\r\n    public async insert_user(user: User, db: Db)  {\r\n        try {\r\n            db!.collection(\"users\").insertOne(user);\r\n            return true;\r\n        } catch (e)  {\r\n            ErrorLog.log(e);\r\n            return false;\r\n        }\r\n    }\r\n    public async find_by_id(id: string, collection: string, db: Db) {\r\n        const oId = new mongo.ObjectID(id);\r\n        try {\r\n            const course = await db.collection(collection).findOne({_id: oId});\r\n            return course;\r\n        } catch (e) {\r\n            ErrorLog.log(e);\r\n        }\r\n    }\r\n\r\n    public async find_course(title: string, db: Db) {\r\n        try {\r\n            const result = await db.collection(\"courses\").find({title: title}).toArray();\r\n            return result;\r\n        } catch (e) {\r\n            ErrorLog.log(e);\r\n        }\r\n    }\r\n\r\n    public async find_reviews(title: string, db: Db) {\r\n        try {\r\n            const result = await db.collection(\"reviews\").find({courseTitle: title}).toArray();\r\n            return result;\r\n        } catch (e) {\r\n            ErrorLog.log(e);\r\n        }\r\n    }\r\n    public async insert_review(review: Review, db: Db) {\r\n\r\n        try {\r\n            db.collection(\"reviews\").insertOne(review);\r\n            return true;\r\n        } catch (e)  {\r\n            ErrorLog.log(e);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport = new DbClient();\r\n"]}